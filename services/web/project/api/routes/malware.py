from flask import jsonify, request, url_for
from sqlalchemy import exc

from project import db
from project.api import bp
from project.api.decorators import check_apikey
from project.api.errors import error_response
from project.models import Malware, MalwareType

"""
CREATE
"""


@bp.route('/malware', methods=['POST'])
@check_apikey
def create_malware():
    """ Creates a new malware. """

    data = request.values or {}

    # Verify the required fields (name) are present.
    if 'name' not in data:
        return error_response(400, 'Request must include "name"')

    # Verify this name does not already exist.
    existing = Malware.query.filter_by(name=data['name']).first()
    if existing:
        return error_response(409, 'Malware already exists')

    # Create and add the new name.
    malware = Malware(name=data['name'])

    # Verify any types that were specified.
    malware_types = data.getlist('types')
    for malware_type in malware_types:

        # Verify each type is actually valid.
        mt = MalwareType.query.filter_by(value=malware_type).first()
        if not mt:
            results = MalwareType.query.all()
            acceptable = sorted([r.value for r in results])
            return error_response(400, 'Valid malware types: {}'.format(', '.join(acceptable)))

        malware.types.append(mt)

    db.session.add(malware)
    db.session.commit()

    response = jsonify(malware.to_dict())
    response.status_code = 201
    response.headers['Location'] = url_for('api.read_malware', malware_id=malware.id)
    return response


"""
READ
"""


@bp.route('/malware/<int:malware_id>', methods=['GET'])
@check_apikey
def read_malware(malware_id):
    """ Gets a single malware given its ID. """

    malware = Malware.query.get(malware_id)
    if not malware:
        return error_response(404, 'Malware ID not found')

    return jsonify(malware.to_dict())


@bp.route('/malware', methods=['GET'])
@check_apikey
def read_malwares():
    """ Gets a list of all the malware. """

    data = Malware.query.all()
    return jsonify([item.to_dict() for item in data])


"""
UPDATE
"""


@bp.route('/malware/<int:malware_id>', methods=['PUT'])
@check_apikey
def update_malware(malware_id):
    """ Updates an existing malware. """

    data = request.values or {}

    # Verify the ID exists.
    malware = Malware.query.get(malware_id)
    if not malware:
        return error_response(404, 'Malware ID not found')

    # Verify at least one required field was specified.
    if 'name' not in data and 'types' not in data:
        return error_response(400, 'Request must include at least name or types')

    # Verify name if one was specified.
    if 'name' in data:

        # Verify this name does not already exist.
        existing = Malware.query.filter_by(name=data['name']).first()
        if existing:
            return error_response(409, 'Malware already exists')
        else:
            malware.name = data['name']

    # Verify any types that were specified.
    malware_types = data.getlist('types')
    for malware_type in malware_types:

            # Verify each type is actually valid.
            mt = MalwareType.query.filter_by(value=malware_type).first()
            if not mt:
                results = MalwareType.query.all()
                acceptable = sorted([r.value for r in results])
                return error_response(400, 'Valid malware types: {}'.format(', '.join(acceptable)))

            malware.types.append(mt)

    # Save the changes.
    db.session.commit()

    response = jsonify(malware.to_dict())
    return response


"""
DELETE
"""


@bp.route('/malware/<int:malware_id>', methods=['DELETE'])
@check_apikey
def delete_malware(malware_id):
    """ Deletes a malware. """

    malware = Malware.query.get(malware_id)
    if not malware:
        return error_response(404, 'Malware ID not found')

    try:
        db.session.delete(malware)
        db.session.commit()
    except exc.IntegrityError:
        db.session.rollback()
        return error_response(409, 'Unable to delete malware due to foreign key constraints')

    return '', 204
